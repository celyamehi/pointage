from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
import os
import logging

logger = logging.getLogger(__name__)

from app.db import get_db
from app.auth.models import TokenData, User, UserInDB

# Configuration directe
SECRET_KEY = "your_secret_key_for_jwt_tokens"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Configuration de la s√©curit√© des mots de passe
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Configuration de l'authentification OAuth2
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="api/auth/token")


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    V√©rifie si le mot de passe en clair correspond au mot de passe hash√©
    """
    try:
        logger.debug(f"üîí V√©rification du mot de passe (hash: {hashed_password[:10]}...)")
        is_valid = pwd_context.verify(plain_password, hashed_password)
        if is_valid:
            logger.info("‚úÖ Mot de passe valide (hash bcrypt)")
        else:
            logger.warning("‚ùå Mot de passe invalide (hash bcrypt)")
        return is_valid
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Erreur lors de la v√©rification du mot de passe: {str(e)}")
        # Si le format du hash n'est pas reconnu, comparer directement les cha√Ænes
        # Ceci est une solution temporaire et non s√©curis√©e
        if plain_password == hashed_password:
            logger.warning("‚ö†Ô∏è Mot de passe v√©rifi√© par comparaison directe (NON S√âCURIS√â)")
            return True
        logger.error("‚ùå Mot de passe invalide")
        return False


def get_password_hash(password: str) -> str:
    """
    G√©n√®re un hash pour le mot de passe
    """
    return pwd_context.hash(password)


async def get_user_by_email(email: str) -> Optional[UserInDB]:
    """
    R√©cup√®re un utilisateur par son email depuis la base de donn√©es
    """
    try:
        logger.info(f"üîç Recherche de l'utilisateur avec l'email: {email}")
        db = await get_db()
        response = db.table("agents").select("*").eq("email", email).execute()
        
        if response.data and len(response.data) > 0:
            user_data = response.data[0]
            logger.info(f"‚úÖ Utilisateur trouv√©: {user_data['nom']} (ID: {user_data['id']}, Role: {user_data['role']})")
            return UserInDB(**user_data)
        logger.warning(f"‚ö†Ô∏è Aucun utilisateur trouv√© avec l'email: {email}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration de l'utilisateur: {str(e)}")
        return None


async def authenticate_user(email: str, password: str) -> Optional[UserInDB]:
    """
    Authentifie un utilisateur par son email et son mot de passe
    """
    logger.info(f"üîê Tentative d'authentification pour: {email}")
    user = await get_user_by_email(email)
    if not user:
        logger.warning(f"‚ùå Utilisateur non trouv√©: {email}")
        return None
    
    logger.info(f"üîë V√©rification du mot de passe pour: {email}")
    if not verify_password(password, user.password_hash):
        logger.warning(f"‚ùå Mot de passe incorrect pour: {email}")
        return None
    
    logger.info(f"‚úÖ Authentification r√©ussie pour: {email}")
    return user


def create_access_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    """
    Cr√©e un token JWT pour l'authentification
    """
    to_encode = data.copy()
    
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    
    return encoded_jwt


async def get_current_user(token: str = Depends(oauth2_scheme)) -> User:
    """
    R√©cup√®re l'utilisateur actuel √† partir du token JWT
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Identifiants invalides",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email: str = payload.get("sub")
        role: str = payload.get("role")
        user_id: str = payload.get("user_id")
        
        if email is None:
            raise credentials_exception
            
        token_data = TokenData(email=email, role=role, user_id=user_id)
    except JWTError:
        raise credentials_exception
        
    user = await get_user_by_email(token_data.email)
    
    if user is None:
        raise credentials_exception
        
    return User(
        id=user.id,
        email=user.email,
        nom=user.nom,
        role=user.role,
        created_at=user.created_at,
        updated_at=user.updated_at
    )


async def get_current_active_user(current_user: User = Depends(get_current_user)) -> User:
    """
    V√©rifie que l'utilisateur actuel est actif
    """
    return current_user


def is_admin(user: User) -> bool:
    """
    V√©rifie si l'utilisateur est un administrateur
    """
    return user.role == "admin"


async def get_admin_user(current_user: User = Depends(get_current_user)) -> User:
    """
    V√©rifie que l'utilisateur actuel est un administrateur
    """
    if not is_admin(current_user):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Acc√®s non autoris√©. Privil√®ges administrateur requis."
        )
    return current_user
