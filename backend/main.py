from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, FileResponse
from datetime import datetime, timedelta
import os
import logging

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Import des modules personnalis√©s
from app.auth import router as auth_router
from app.qrcode import router as qrcode_router
from app.pointage import router as pointage_router
from app.admin import router as admin_router
from app.db import init_db

# Les variables d'environnement sont d√©finies directement dans app/db.py

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="Collable - Syst√®me de Pointage",
    description="API pour le syst√®me de pointage de la soci√©t√© Collable",
    version="1.0.0",
)

# Configuration CORS pour permettre les requ√™tes du frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # √Ä remplacer par l'URL du frontend en production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialisation de la base de donn√©es au d√©marrage
@app.on_event("startup")
async def startup_db_client():
    logger.info("üöÄ D√©marrage de l'application...")
    await init_db()
    logger.info("‚úÖ Application d√©marr√©e avec succ√®s")

# Inclusion des routers
app.include_router(auth_router.router, prefix="/api/auth", tags=["Authentication"])
app.include_router(qrcode_router.router, prefix="/api/qrcode", tags=["QR Code"])
app.include_router(pointage_router.router, prefix="/api/pointage", tags=["Pointage"])
app.include_router(admin_router.router, prefix="/api/admin", tags=["Administration"])

# Route racine
@app.get("/", tags=["Root"])
async def read_root():
    logger.info("üìç Acc√®s √† la route racine")
    return {"message": "Bienvenue sur l'API du syst√®me de pointage Collable"}

# Route de sant√© pour v√©rifier que l'API fonctionne
@app.get("/health", tags=["Health"])
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

# Montage des fichiers statiques (si n√©cessaire)
app.mount("/static", StaticFiles(directory="static"), name="static")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
